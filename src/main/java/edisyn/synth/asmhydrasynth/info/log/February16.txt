February 16, 2023 Hydrasynth sysex reverse engineering notes.  


Let's start with the first byte.

        4D 44 41 77		1001101 1000100 1000001 1110111 (000)
        4D 54 41 77             1001101 1010100 1000001 1110111 (100)
        4D 54 41 77             1001101 1101010 1000001 1110111 (200)
        4D 54 41 77             1001101 1111010 1000001 1110111 (300)
        4D 7A 41 77             1001110 1000100 1000001 1110111 (400)
        4E 7A 41 77             1001110 1111010 1000001 1110111 (700)
        51 54 41 77             1010001 1010100 1000001 1110111 (A00)   // Big Expected Skip
        4A 44 41 77             1001010 1000100 1000001 1110111 ($00)
        59 44 41 77             1011001 1000100 1000001 1110111 (`00)
        59 54 41 77             1011001 1010100 1000001 1110111 (a00)
        5A 7A 41 77             1011010 1111010 1000001 1110111 (g00)
        61 44 41 77             1100001 1000100 1000001 1110111 (h00)   // Sudden UNEXPECTED Skip
        65 6A 41 77             1100101 1101010 1000001 1110111 (z00)
        65 7A 41 77             1100101 1111010 1000001 1110111 ({00)
        66 54 41 77             1100110 1010100 1000001 1110111 (}00)
DIFFs                            ^^^^^^  ^^XXX


So this would imply that 

        $  is  00101000[010] = 0x28   (in ascii, is 0x24 or 00100100)
        0  is  00110100[010] = 0x34   (in ascii, is 0x30 or 00110000)
        1  is  00110101[010] = 0x35   (in ascii, is 0x31 or 00110001)
        2  is  00110110[101] = 0x36
        3  is  00110111[101] = 0x37   (in ascii, is 0x33 or 00110011)
        4  is  00111000[010] = 0x38
        7  is  00111011[101] = 0x3B   (in ascii, is 0x37 or 00110111)
        A  is  01000101[010] = 0x45   (in ascii, is 0x41 or 01000001)
        `  is  01100100[010] = 0x64   (in ascii, is 0x60 or 01100000)
        a  is  01100101[010] = 0x65   (in ascii, is 0x61 or 01100001)
        g  is  01101011[101] = 0x6B   (in ascii, is 0x67 or 01100111)
        h  is  10000100[010] = 0x84   (in ascii, is 0x68 or 01101000)
        z  is  10010110[101] = 0x96   (in ascii, is 0x7a or 01111010)
        {  is  10010111[101] = 0x97   (in ascii, is 0x7b or 01111011)
        }  is  10011001[010] = 0x99   (in ascii, is 0x7d or 01111101)

If we flip the third to last bit, then most of these values become
correct; but h and upwards are still off by 24.  I suspect that they're
just reencoded that way for some nutso reason.
 
So I'm guessing that the first number is encoded as

        1AAAAAQ 1BB???. ....... .......         -> AAAAA[1-Q]BB

Or alternatively [if the whole character set is shifted down by 4]

        1AAAAAQ 1BB???. ....... .......         -> AAAAAQBB
        
What's going on with the ???  I note that when BB are 00 or 01 then 
??? is 010 and when BB are 10 or 11 then ??? is 101.  Is this a checksum?
There's not enough room here -- something is going on with the second byte.

But here's the weird thing.  In (   ) [three spaces], the binary is

        1001101 1010100 1000101 1111000
        
This would imply that a single space was 00110101, which is 0x35, but space
is 0x20 in ascii, and 0x31 is the hydrasynth encoding for 1.  What?  Did I 
make a mistake for space?



Let's look at the last byte:

        4D 44 41 77 1001101 1000100 1000001 1110111 (000)
        4D 44 41 78 1001101 1000100 1000001 1111000 (001)
        4D 44 41 79 1001101 1000100 1000001 1111001 (002)
        4D 44 41 7A 1001101 1000100 1000001 1111010 (003)
        4D 44 41 30 1001101 1000100 1000001 0110000 (004)
        4D 44 41 31 1001101 1000100 1000001 0110001 (005)
        4D 44 41 35 1001101 1000100 1000001 0110101 (009)
        4D 44 42 42 1001101 1000100 1000010 1000010 (00A)
        4D 44 42 68 1001101 1000100 1000010 1101000 (00a)
        4D 44 42 37 1001101 1000100 1000010 0110111 (00{)
        4D 44 42 39 1001101 1000100 1000010 0111001 (00})
DIFF:                                    ^^ ^^^^^^^

        0 is 011110111       vs      00110100
        1 is 011111000       vs      00110101
        2 is 011111001       vs      00110110
        3 is 011111010       vs      00110111
        4 is 010110000       vs      00111000
        5 is 010110001       vs      00111001
        9 is 010110101       vs      00111001
        A is 101000010       vs      01000101
        a is 101101000       vs      01100101
        { is 100110111       vs      10010111
        } is 100111001       vs      10011001
NUM:         ABCDEFGHI               JKLMNOPQ

                                Is B = M?
                                Is C = ~N except for { } ?
                                Is D = L except for { } ?
                                Is E = ~K?

Note that 0 through 3 are strictly increasing in value.
Then there is a break.  Then 5 through 9 are strictly increasing
in value.  Also { and } are 2 apart which is correct.
What is going on here?



How about the middle byte?

        4D 44 41 77             1001101 1000100 1000001 1110111 (000)
        4D 44 45 77             1001101 1000100 1000101 1110111 (010)
        4D 44 49 77             1001101 1000100 1001001 1110111 (020)
        4D 44 4D 77             1001101 1000100 1001101 1110111 (030)
        4D 44 51 77             1001101 1000100 1010001 1110111 (040)
        4D 45 45 77             1001101 1000101 1000101 1110111 (0A0)
        4D 47 45 77             1001101 1000111 1000101 1110111 (0a0)
        4D 48 73 77             1001101 1001000 1110011 1110111 (0{0)
        4D 48 30 77             1001101 1001000 0110000 1110111 (0}0)
DIFF:                                      XXX^ ^^^^^^^

        0 is 01001000001     vs      00110100
        1 is 01001000101     vs      00110101
        2 is 01001001001     vs      00110110
        3 is 01001001101     vs      00110111
        4 is 01001010001     vs      00111000
        A is 01011000101     vs      01000101
        a is 01111000101     vs      01100101
        
        { is 10001110011     vs      10010111
        } is 10000110000     vs      10011001
NUM:         0123456789A             HIJKLMNO

So clearly 6 is L and 78 are NO except for { }.
Is  0 = H?  Is ~1 = H?  Is 2 = I?  Is ~3 = K?


It seems that this is likely an obfucation mechanism.  Given the first
byte I still don't think it's an outright encryption scheme.  But
it may be necessary to rainbow table the last two bytes yuck, and it's
not clear how they overlap yet.



