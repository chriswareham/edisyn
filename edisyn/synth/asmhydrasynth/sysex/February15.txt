February 15, 2023 Hydrasynth sysex reverse engineering notes.  This is divided
into sections:

As noted before,

If you create a default patch at slot E128 named "0000000000000000",  you get
the following back as the first response message:

    00  F0 00 20 2B 00 6F 48 5A  68 7A 39 42 59 41 41 42  |   + oHZhz9BYAAB|
    10  59 46 41 41 52 2F 6D 77  42 2F 41 67 63 77 4D 44  |YFAAR/mwB/AgcwMD|
    20  41 77 4D 44 41 77 4D 44  41 77 4D 44 41 77 4D 44  |AwMDAwMDAwMDAwMD|
    30  41 77 41 41 45 41 73 41  51 41 41 41 51 41 49 41  |AwAAEAsAQAAAQAIA|
    40  41 41 41 41 41 41 41 41  41 41 41 41 49 41 41 67  |AAAAAAAAAAAAIAAg|
    50  42 6D 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |BmAAAAAAAAAAAAAA|
    60  41 42 41 41 45 41 41 41  41 41 41 41 41 41 41 41  |ABAAEAAAAAAAAAAA|
    70  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 77  |AAAAAAAAAAAAAAAw|
    80  41 41 41 41 41 41 5A 41  41 41 41 41 4D 41 41 41  |AAAAAAZAAAAAMAAA|
    90  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|
    A0  41 41 41 41 4D 41 41 41  41 41 41 47 51 41 41 41  |AAAAMAAAAAAGQAAA|
    B0  41 44 41 41 41 41 41 41  41 41 41 41 3D 3D F7     |ADAAAAAAAAAA== |

The string was

    77 4D 44 41 77 4D 44 41 77 4D 44 41 77 4D 44 41 77 4D 44 41 77

I had previously compared this to "                ", which could be 0x10 off
or 0x01.  So let's compare it to "1111111111111111" which is 0x01 off:

    00  F0 00 20 2B 00 6F 77 69  34 6B 66 78 59 41 41 42  |   + owi4kfxYAAB|
    10  59 46 41 41 52 2F 6D 77  42 2F 41 67 63 78 4D 54  |YFAAR/mwB/AgcxMT|
    20  45 78 4D 54 45 78 4D 54  45 78 4D 54 45 78 4D 54  |ExMTExMTExMTExMT|
    30  45 78 41 41 45 41 73 41  51 41 41 41 51 41 49 41  |ExAAEAsAQAAAQAIA|
    40  41 41 41 41 41 41 41 41  41 41 41 41 49 41 41 67  |AAAAAAAAAAAAIAAg|
    50  42 6D 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |BmAAAAAAAAAAAAAA|
    60  41 42 41 41 45 41 41 41  41 41 41 41 41 41 41 41  |ABAAEAAAAAAAAAAA|
    70  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 77  |AAAAAAAAAAAAAAAw|
    80  41 41 41 41 41 41 5A 41  41 41 41 41 4D 41 41 41  |AAAAAAZAAAAAMAAA|
    90  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|
    A0  41 41 41 41 4D 41 41 41  41 41 41 47 51 41 41 41  |AAAAMAAAAAAGQAAA|
    B0  41 44 41 41 41 41 41 41  41 41 41 41 3D 3D F7     |ADAAAAAAAAAA== |

The string here is

    78 4D 54 45 78 4D 54 45 78 4D 54 45 78 4D 54 45 78 4D 54 45 78

And consider "2222222222222222" which is 0x02 off:

00  F0 00 20 2B 00 6F 34 76  4F 74 4F 52 59 41 41 42  |   + o4vOtORYAAB|
10  59 46 41 41 52 2F 6D 77  42 2F 41 67 63 79 4D 6A  |YFAAR/mwB/AgcyMj|
20  49 79 4D 6A 49 79 4D 6A  49 79 4D 6A 49 79 4D 6A  |IyMjIyMjIyMjIyMj|
30  49 79 41 41 45 41 73 41  51 41 41 41 51 41 49 41  |IyAAEAsAQAAAQAIA|
40  41 41 41 41 41 41 41 41  41 41 41 41 49 41 41 67  |AAAAAAAAAAAAIAAg|
50  42 6D 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |BmAAAAAAAAAAAAAA|
60  41 42 41 41 45 41 41 41  41 41 41 41 41 41 41 41  |ABAAEAAAAAAAAAAA|
70  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 77  |AAAAAAAAAAAAAAAw|
80  41 41 41 41 41 41 5A 41  41 41 41 41 4D 41 41 41  |AAAAAAZAAAAAMAAA|
90  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|
A0  41 41 41 41 4D 41 41 41  41 41 41 47 51 41 41 41  |AAAAMAAAAAAGQAAA|
B0  41 44 41 41 41 41 41 41  41 41 41 41 3D 3D F7     |ADAAAAAAAAAA== |

The string here is

    79 4D 6A 49 79 4D 6A 49 79 4D 6A 49 79 4D 6A 49 79 4D 6A 49 79

Now here's "3333333333333333"

00  F0 00 20 2B 00 6F 50 55  58 36 73 68 59 41 41 42  |   + oPUX6shYAAB|
10  59 46 41 41 52 2F 6D 77  42 2F 41 67 63 7A 4D 7A  |YFAAR/mwB/AgczMz|
20  4D 7A 4D 7A 4D 7A 4D 7A  4D 7A 4D 7A 4D 7A 4D 7A  |MzMzMzMzMzMzMzMz|
30  4D 7A 41 41 45 41 73 41  51 41 41 41 51 41 49 41  |MzAAEAsAQAAAQAIA|
40  41 41 41 41 41 41 41 41  41 41 41 41 49 41 41 67  |AAAAAAAAAAAAIAAg|
50  42 6D 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |BmAAAAAAAAAAAAAA|
60  41 42 41 41 45 41 41 41  41 41 41 41 41 41 41 41  |ABAAEAAAAAAAAAAA|
70  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 77  |AAAAAAAAAAAAAAAw|
80  41 41 41 41 41 41 5A 41  41 41 41 41 4D 41 41 41  |AAAAAAZAAAAAMAAA|
90  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|
A0  41 41 41 41 4D 41 41 41  41 41 41 47 51 41 41 41  |AAAAMAAAAAAGQAAA|
B0  41 44 41 41 41 41 41 41  41 41 41 41 3D 3D F7     |ADAAAAAAAAAA== |

The string here is

    7A 4D 7A 4D 7A 4D 7A 4D 7A 4D 7A  4D 7A 4D 7A 4D 7A 4D 7A 4D 7A

That one is odd!

Let's convert to binary and strip the high bits:

    77 4D 44 41    1110111 1001101 1000100 1000001		(0000000000000000)
    78 4D 54 45    1111000 1001101 1010100 1000101		(1111111111111111)
    79 4D 6A 49    1111001 1001101 1101010 1001001		(2222222222222222)
    7A 4D 7A 4D    1111010 1001101 1111010 1001101		(3333333333333333)

I see three increases in value:

    77 4D 44 41    1110111 1001101 1000100 1000001		(0000000000000000)
    78 4D 54 45    1111000 1001101 1010100 1000101		(1111111111111111)
    79 4D 6A 49    1111001 1001101 1101010 1001001		(2222222222222222)
    7A 4D 7A 4D    1111010 1001101 1111010 1001101		(3333333333333333)
 
                      AAAA          BBB ??    CCC

To confirm my theory that this is a 3-in-4 enoding, here is "444555666777888 "

    00  F0 00 20 2B 00 6F 54 64  79 55 49 78 59 41 41 42  |   + oTdyUIxYAAB|
    10  59 46 41 41 52 2F 6D 77  42 2F 41 67 63 30 4E 44  |YFAAR/mwB/Agc0ND|
    20  51 31 4E 54 55 32 4E 6A  59 33 4E 7A 63 34 4F 44  |Q1NTU2NjY3Nzc4OD|
    30  67 41 41 41 45 41 73 41  51 41 41 41 51 41 49 41  |gAAAEAsAQAAAQAIA|
    40  41 41 41 41 41 41 41 41  41 41 41 41 49 41 41 67  |AAAAAAAAAAAAIAAg|
    50  42 6D 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |BmAAAAAAAAAAAAAA|
    60  41 42 41 41 45 41 41 41  41 41 41 41 41 41 41 41  |ABAAEAAAAAAAAAAA|
    70  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 77  |AAAAAAAAAAAAAAAw|
    80  41 41 41 41 41 41 5A 41  41 41 41 41 4D 41 41 41  |AAAAAAZAAAAAMAAA|
    90  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|
    A0  41 41 41 41 4D 41 41 41  41 41 41 47 51 41 41 41  |AAAAMAAAAAAGQAAA|
    B0  41 44 41 41 41 41 41 41  41 41 41 41 3D 3D F7     |ADAAAAAAAAAA== |

The string is

    30 4E 44 51 31 4E 54 55 32 4E 6A 59 33 4E 7A 63 34 4F 44 67 41

IF the 3-byte encoding indeed starts at 30, then we have:

    30 4E 44 51    0110000 1001110 1000100 1010001		(4444444444444444)
    31 4E 54 55    0110001 1001110 1010100 1010101		(5555555555555555)
    32 4E 6A 59    0110010 1001110 1101010 1011001		(6666666666666666)
    33 4E 7A 63    0110011 1001110 1111010 1100011		(7777777777777777)
    34 4F 44 67    0110000 1001110 1000100 1010001		(8888888888888888)
Again:                  AA          BBC???  ..UH..

So clearly the second and third bytes of each 4-byte pair are doing
something unnatural.  And the first byte doesn't follow on from 33333....

What's really odd about the fourth byte is that so far it has gone:

41 45 49 4D 51 55 59 SKIP-10 63 67

It skipped 10 places rather than 4 between 59 and 63.  To from 6 to 7.
In ASCII 6 is ox54 and 7 is 0x55 (8: 0x56, is the next multiple of 8).
So that's not interesting.  OR the Hydrasynth could be defining SPACE 
to be 0, then 6 would be 7 and 7 would be 8.

Why would they be encoding like this?  It's not like they're saving space,
since they still have 85 characters in their set rather than 128, it's
still 7 bits worth.


Let's try "4444444444444444":

00  F0 00 20 2B 00 6F 4A 31  38 41 41 52 59 41 41 42  |   + oJ18AARYAAB|
10  59 46 41 41 52 2F 6D 77  42 2F 41 67 63 30 4E 44  |YFAAR/mwB/Agc0ND|
20  51 30 4E 44 51 30 4E 44  51 30 4E 44 51 30 4E 44  |Q0NDQ0NDQ0NDQ0ND|
30  51 41 41 41 45 41 73 41  51 41 41 41 51 41 49 41  |QAAAEAsAQAAAQAIA|
40  41 41 41 41 41 41 41 41  41 41 41 41 49 41 41 67  |AAAAAAAAAAAAIAAg|
50  42 6D 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |BmAAAAAAAAAAAAAA|
60  41 42 41 41 45 41 41 41  41 41 41 41 41 41 41 41  |ABAAEAAAAAAAAAAA|
70  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 77  |AAAAAAAAAAAAAAAw|
80  41 41 41 41 41 41 5A 41  41 41 41 41 4D 41 41 41  |AAAAAAZAAAAAMAAA|
90  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|
A0  41 41 41 41 4D 41 41 41  41 41 41 47 51 41 41 41  |AAAAMAAAAAAGQAAA|
B0  41 44 41 41 41 41 41 41  41 41 41 41 3D 3D F7     |ADAAAAAAAAAA== |

The string is

    30 4E 44 51 30 4E 44 51 30 4E 44 51 30 4E 44 51 30 4E 44 51 30

    30 4E 44 51    0110000 1001110 1000100 1010001		(4444444444444444)

... so that's consistent unfortunately.  How about the others?

Let's try "888888888888":

00  F0 00 20 2B 00 6F 4F 69  6C 62 6C 78 59 41 41 42  |   + oOilblxYAAB|
10  59 46 41 41 52 2F 6D 77  42 2F 41 67 63 34 4F 44  |YFAAR/mwB/Agc4OD|
20  67 34 4F 44 67 34 4F 44  67 34 4F 44 67 34 4F 44  |g4ODg4ODg4ODg4OD|
30  67 41 41 41 45 41 73 41  51 41 41 41 51 41 49 41  |gAAAEAsAQAAAQAIA|
40  41 41 41 41 41 41 41 41  41 41 41 41 49 41 41 67  |AAAAAAAAAAAAIAAg|
50  42 6D 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |BmAAAAAAAAAAAAAA|
60  41 42 41 41 45 41 41 41  41 41 41 41 41 41 41 41  |ABAAEAAAAAAAAAAA|
70  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 77  |AAAAAAAAAAAAAAAw|
80  41 41 41 41 41 41 5A 41  41 41 41 41 4D 41 41 41  |AAAAAAZAAAAAMAAA|
90  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|
A0  41 41 41 41 4D 41 41 41  41 41 41 47 51 41 41 41  |AAAAMAAAAAAGQAAA|
B0  41 44 41 41 41 41 41 41  41 41 41 41 3D 3D F7     |ADAAAAAAAAAA== |

The string is

    34 4F 44 67 34 4F 44 67 34 4F 44 67 34 4F 44 67 34 4F 44 67 41
    
    34 4F 44 67    0110000 1001110 1000100 1010001		(8888888888888888)

That is again consistent.  

Let's try permuting:  "889889988988898":  So we have 889 889 998 998 898

00  F0 00 20 2B 00 6F 6C 6B  59 58 4E 68 59 41 41 42  |   + olkYXNhYAAB|
10  59 46 41 41 52 2F 6D 77  42 2F 41 67 63 34 4F 44  |YFAAR/mwB/Agc4OD|
20  6B 34 4F 44 6B 35 4F 44  67 35 4F 44 67 34 4F 54  |k4ODk5ODg5ODg4OT|
30  67 41 41 41 45 41 73 41  51 41 41 41 51 41 49 41  |gAAAEAsAQAAAQAIA|
40  41 41 41 41 41 41 41 41  41 41 41 41 49 41 41 67  |AAAAAAAAAAAAIAAg|
50  42 6D 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |BmAAAAAAAAAAAAAA|
60  41 42 41 41 45 41 41 41  41 41 41 41 41 41 41 41  |ABAAEAAAAAAAAAAA|
70  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 77  |AAAAAAAAAAAAAAAw|
80  41 41 41 41 41 41 5A 41  41 41 41 41 4D 41 41 41  |AAAAAAZAAAAAMAAA|
90  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|
A0  41 41 41 41 4D 41 41 41  41 41 41 47 51 41 41 41  |AAAAMAAAAAAGQAAA|
B0  41 44 41 41 41 41 41 41  41 41 41 41 3D 3D F7     |ADAAAAAAAAAA== |

The string is

    34 4F 44 6B 34 4F 44 6B 35 4F 44 67 35 4F 44 67 34 4F 54 67 41

So we have:

	34 4F 44 6B		889
	34 4F 44 6B		889
	35 4F 44 67		988
	35 4F 44 67		998
	34 4F 54 67		898

Clearly it's 3-in-4 and they are independent blocks.  That's good news.

Let's try "089889988988898"

00  F0 00 20 2B 00 6F 5A 50  6A 6E 31 42 59 41 41 42  |   + oZPjn1BYAAB|
10  59 46 41 41 52 2F 6D 77  42 2F 41 67 63 77 4F 44  |YFAAR/mwB/AgcwOD|
20  6B 34 4F 44 6B 35 4F 44  67 35 4F 44 67 34 4F 54  |k4ODk5ODg5ODg4OT|
30  67 41 41 41 45 41 73 41  51 41 41 41 51 41 49 41  |gAAAEAsAQAAAQAIA|
40  41 41 41 41 41 41 41 41  41 41 41 41 49 41 41 67  |AAAAAAAAAAAAIAAg|
50  42 6D 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |BmAAAAAAAAAAAAAA|
60  41 42 41 41 45 41 41 41  41 41 41 41 41 41 41 41  |ABAAEAAAAAAAAAAA|
70  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 77  |AAAAAAAAAAAAAAAw|
80  41 41 41 41 41 41 5A 41  41 41 41 41 4D 41 41 41  |AAAAAAZAAAAAMAAA|
90  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|
A0  41 41 41 41 4D 41 41 41  41 41 41 47 51 41 41 41  |AAAAMAAAAAAGQAAA|
B0  41 44 41 41 41 41 41 41  41 41 41 41 3D 3D F7     |ADAAAAAAAAAA== |

The string is

    77 4F 44 6B 34 4F 44 6B 35 4F 44 67 35 4F 44 67 34 4F 54 67 41

So we have:

	77 4F 44 6B		1110111 1001111 1000100 1101011		(089)
	34 4F 44 6B		0110100 1001111 1000100 1101011		(889)
DIFFS:         		^    ^^                             
	
Compare to:

    77 4D 44 41     1110111 1001101 1000100 1000001		(0000000000000000)
    34 4F 44 67     0110000 1001110 1000100 1010001		(8888888888888888)
	
That's really weird: 0 has 111 and *8* (not 7!) has 000.

So let's start going through and setting values and see if we can crack this open.

    77 4D 44 41    1110111 1001101 1000100 1000001		(000)
    78 4D 44 41    		(100)
    79 4D 44 41    		(200)
    7A 4D 44 41    		(300)
    30 4D 44 41			(400)	// weird jump from 7A to 30
    31 4D 44 41			(500)
    32 4D 44 41			(600)
    33 4D 44 41			(700)
    34 4D 44 41			(800)
    35 4D 44 41			(900)
    42 4D 44 41			(A00)	// weird jump from 35 to 42
    43 4D 44 41			(B00)
    44 4D 44 41			(C00)
    ...
    5A 4D 44 41			(Y00)
    61 4D 44 41			(Z00)	// weird jump from 5A to 61
    68 4D 44 41			(a00)	// weird jump from 61 to 68
    69 4D 44 41			(b00)
    ...
    35 4D 44 41			(y00)	// WAIT
 
This isn't possible because it's also 900.  It appears that the FIRST number
has been changing. This in turn suggests that the first byte (9, y, etc.)
is part of the triplet embedded in the 4 bytes leading up to and including the 35.
This makes sense given that, starting after the F0 00 20 2B 00 6F, four-byte
chunks would end at the 35 and start at the 4D.  So ACTUALLY have (skipping the
first character):

	4D 54 45 78		1001101 1010100 1000101 1111000	(   )
    4D 44 41 77		1001101 1000100 1000001 1110111	(000)
    4D 54 45 78		1001101 1010100 1000101 1111000	(111)
    4D 6A 49 79		1001101 1101010 1001001 1111001	(222)
    4D 7A 4D 7A		1001101 1111010 1001101 1111010	(333)
    4E 44 51 30		1001110 1000100 1010001 0110000	(444)
    4E 54 55 31		1001110 1010100 1010101 0110001	(555)
    4E 6A 59 32		1001110 1101010 1011001 0110010	(666)
    4E 7A 63 33		1001110 1111010 1100011 0110011	(777)
    4F 44 67 34		1001111 1000100 1100111 0110100	(888)
    4F 54 6B 35		1001111 1010100 1101011 0110101	(999)
    51 55 46 42		1010001 1010101 1000110 1000010	(AAA)
    51 6B 4A 43		1010001 1101011 1001010 1000011	(BBB)
    51 30 4E 44		1010001 0110000 1001110 1000100	(CCC)
    52 45 52 45		1010010 1000101 1010010 1000101	(DDD)
    52 55 56 46		1010010 1010101 1010110 1000110	(EEE)
    52 6B 5A 47		1010010 1101011 1011010 1000111	(FFF)
    52 30 64 48		1010010 0110000 1100100 1001000	(GGG)
    53 45 68 49		1010011 1000101 1101000 1001001	(HHH)

// Okay, let's see if we can break out the first, second, and third character bits.
// First we identify the numbers corresponding to 

    4D 44 41 77		1001101 1000100 1000001 1110111	(000)
	4D 54 41 77		1001101 1010100 1000001 1110111	(100)
	4D 6A 41 77		1001101 1101010 1000001 1110111	(200)
	4D 7A 41 77		1001101 1111010 1000001 1110111	(300)
	4E 44 41 77		1001110 1000100 1000001 1110111	(400)
	4E 54 41 77		1001110 1010100 1000001 1110111	(500)
	4E 6A 41 77		1001110 1101010 1000001 1110111	(600)
	4E 7A 41 77		1001110 1111010 1000001 1110111	(700)
	4F 44 41 77		1001111 1000100 1000001 1110111	(800)
	4F 54 41 77		1001111 1010100 1000001 1110111	(900)
	51 54 41 77		1010001 1010100 1000001 1110111	(A00)	// Big Expected Skip
	...
	57 6A 41 77		(Z00)
	59 54 41 77		(a00)	// Big Expected Skip
	...
	5A 44 41 77		(d00)
	5A 54 41 77		(e00)
	5A 6A 41 77		(f00)
	5A 7A 41 77		(g00)	
	61 44 41 77		(h00)	// Sudden UNEXPECTED Skip
	...
	65 6A 41 77		(z00)
	49 54 41 77		(!00)	// And here come a bunch of random values
	47 7A 41 77		(#00)
	4A 44 41 77		($00)
	4A 54 41 77		(%00)
	4A 6A 41 77		(&00)
	4A 7A 41 77		('00)
	4B 44 41 77		((00)
	4B 54 41 77		()00)
	4B 7A 41 77		(+00)
	4C 44 41 77		(,00)
	4C 54 41 77		(-00)
	4C 6A 41 77		(.00)
	4F 7A 41 77		(;00)
	50 54 41 77		(=00)
	51 44 41 77		(@00)
	57 7A 41 77		([00)
	58 54 41 77		(]00)
	58 6A 41 77		(^00)
	58 7A 41 77		(_00)
	59 44 41 77		1011001 1000100 1000001 1110111	(`00)
	65 7A 41 77		1100101 1111010 1000001 1110111	({00)
	66 54 41 77		1100110 1010100 1000001 1110111	(}00)

	4D 44 45 77		(010)
	4D 44 49 77		(020)
	4D 44 4D 77		(030)
	4D 44 51 77		(040)
	4D 45 45 77		(0A0)
	4D 47 45 77		(0a0)
	4D 48 73 77		(0{0)
	4D 48 30 77		(0}0)
	
	4D 44 41 78		(001)
	4D 44 41 79		(002)
	4D 44 41 7A		(003)
	4D 44 41 30		(004)
	4D 44 41 31		(005)
	4D 44 41 35		(009)
	4D 44 42 42		(00A)
	4D 44 42 68		(00a)
	4D 44 42 37		(00{)
	4D 44 42 39		(00})
	
